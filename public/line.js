// Generated by CoffeeScript 1.3.3
(function() {

  define(['./vector'], function(Vector) {
    var Graphics, Line, LineGraphic, Shape;
    Graphics = createjs.Graphics;
    Shape = createjs.Shape;
    Line = (function() {

      Line.prototype.hitSpacing = 10;

      Line.prototype.nextHit = 0;

      Line.prototype.onCollision = function() {
        return this.nextHit = this.hitSpacing;
      };

      Line.prototype.updateNextHit = function() {
        return this.nextHit--;
      };

      function Line(from, to, color) {
        if (color == null) {
          color = [0, 0, 0];
        }
        this.from = from;
        this.to = to;
        this.color = color;
      }

      Line.prototype.slope = function() {
        return (this.to[1] - this.from[1]) / (this.to[0] - this.from[0]);
      };

      Line.prototype.intercept = function() {
        return this.from[1] - this.slope() * this.from[0];
      };

      Line.prototype.length = function() {
        return Vector.length(Vector.subtract(this.from, this.to));
      };

      Line.prototype.perpendicularJoining = function(point) {
        var intercept, newIntercept, newSlope, slope, xIntersect, yIntersect;
        slope = this.slope();
        if (slope === 0) {
          return new Line(point, [point[0], this.from[1]], this.color);
        } else if (slope === 1 / 0) {
          return new Line(point, [this.from[0], point[1]], this.color);
        } else {
          newSlope = -1 / slope;
          intercept = this.intercept();
          newIntercept = point[1] - newSlope * point[0];
          xIntersect = (newIntercept - intercept) / (slope - newSlope);
          yIntersect = newSlope * xIntersect + newIntercept;
          return new Line(point, [xIntersect, yIntersect], this.color);
        }
      };

      Line.prototype.render = function(stage) {
        this.graphic || (this.graphic = new LineGraphic(this));
        this.graphic.render(stage);
        return this.updateNextHit();
      };

      return Line;

    })();
    LineGraphic = (function() {

      function LineGraphic(object) {
        var _ref, _ref1;
        this.object = object;
        this.g = new Graphics();
        this.g.beginStroke(Graphics.getRGB.apply(Graphics, this.object.color));
        (_ref = this.g).moveTo.apply(_ref, this.object.from);
        (_ref1 = this.g).lineTo.apply(_ref1, this.object.to);
        this.shape = new Shape(this.g);
        this.shape.x = 0;
        this.shape.y = 0;
      }

      LineGraphic.prototype.render = function(stage) {
        return stage.addChild(this.shape);
      };

      return LineGraphic;

    })();
    return Line;
  });

}).call(this);
