// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['underscore', 'jquery', './socket', './line', './vector', './physics'], function(_, $, socket, Line, Vector, Physics) {
    var Ball, BallGraphic, Game, Graphics, Player, PlayerGraphic, Shape, Stage, Ticker, canvas, config, player, stage, start;
    Stage = createjs.Stage;
    Graphics = createjs.Graphics;
    Shape = createjs.Shape;
    Ticker = createjs.Ticker;
    config = {
      width: $('canvas').width(),
      height: $('canvas').height()
    };
    canvas = $('#playingfield');
    canvas.width(config.width);
    canvas.height(config.height);
    stage = new createjs.Stage(canvas[0]);
    player = null;
    window.stage = stage;
    Ball = (function() {

      Ball.prototype.friction = 0;

      Ball.prototype.radius = 5;

      function Ball() {
        this.position = [config.width / 2, config.height / 2];
        this.graphic = new BallGraphic(this);
        this.velocity = [0.1, 0.1];
      }

      Ball.prototype.updatePosition = function(delta) {
        if (delta) {
          this.position[0] += this.velocity[0] * delta;
          return this.position[1] += this.velocity[1] * delta;
        }
      };

      Ball.prototype.updateVelocity = function(delta) {
        return this.velocity = Vector.scale(1 - this.friction, this.velocity);
      };

      Ball.prototype.render = function(delta) {
        this.updateVelocity(delta);
        this.updatePosition(delta);
        return this.graphic.render(delta);
      };

      return Ball;

    })();
    Player = (function() {

      Player.prototype.radius = 10;

      function Player(id) {
        var _this = this;
        this.position = [250, 250];
        this.velocity = [0, 0];
        this.graphic = new PlayerGraphic(this);
        this.playerId = id;
        socket.on("player:" + this.playerId + ":move", function(pos) {
          return _this.updatePosition(pos);
        });
      }

      Player.prototype.hitSpacing = 10;

      Player.prototype.nextHit = 0;

      Player.prototype.updatePosition = function(p) {
        return this.position = Vector.add(this.position, [config.width * p[0], config.height * p[1]]);
      };

      Player.prototype.updateVelocity = function(delta) {
        var pdelta;
        if (!this.lastPosition) {
          this.lastPosition = this.position;
          return this.velocity = [0, 0];
        } else {
          pdelta = Vector.subtract(this.position, this.lastPosition);
          this.velocity = Vector.scale(1 / delta, pdelta);
          return this.lastPosition = this.position;
        }
      };

      Player.prototype.onCollision = function() {
        return this.nextHit = this.hitSpacing;
      };

      Player.prototype.updateNextHit = function() {
        return this.nextHit--;
      };

      Player.prototype.render = function(delta) {
        this.updateVelocity(delta);
        this.graphic.render();
        return this.updateNextHit();
      };

      return Player;

    })();
    PlayerGraphic = (function() {

      PlayerGraphic.prototype.color = [255, 0, 0];

      function PlayerGraphic(player) {
        this.player = player;
        this.g = new Graphics();
        this.g.beginStroke(Graphics.getRGB.apply(Graphics, this.color));
        this.g.drawCircle(-1 * this.player.radius / 2, -1 * this.player.radius / 2, this.player.radius);
        this.circle = new Shape(this.g);
        this.circle.x = this.getX();
        this.circle.y = this.getY();
        stage.addChild(this.circle);
      }

      PlayerGraphic.prototype.getX = function() {
        return this.player.position[0];
      };

      PlayerGraphic.prototype.getY = function() {
        return this.player.position[1];
      };

      PlayerGraphic.prototype.render = function() {
        this.circle.x = this.getX();
        this.circle.y = this.getY();
        return stage.addChild(this.circle);
      };

      return PlayerGraphic;

    })();
    BallGraphic = (function(_super) {

      __extends(BallGraphic, _super);

      function BallGraphic() {
        return BallGraphic.__super__.constructor.apply(this, arguments);
      }

      BallGraphic.prototype.color = [255, 0, 0];

      return BallGraphic;

    })(PlayerGraphic);
    Game = (function() {

      function Game() {
        this.start = __bind(this.start, this);

        this.tick = __bind(this.tick, this);
        this.players = [];
        this.addBall();
        this.addLines();
      }

      Game.prototype.addPlayer = function(id) {
        return this.players.push(new Player(id));
      };

      Game.prototype.addBall = function() {
        return this.ball = new Ball();
      };

      Game.prototype.addLines = function() {
        var colors, i, points, _i, _ref, _results,
          _this = this;
        points = [[0, 200], [400, 100], [500, 200], [400, 400], [100, 400], [0, 200]];
        colors = [[0, 250, 0], [250, 0, 0], [250, 250, 0], [0, 0, 250], [0, 250, 250], [0, 0, 0]];
        this.lines || (this.lines = []);
        _results = [];
        for (i = _i = 0, _ref = points.length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push((function(i) {
            return _this.lines.push(new Line(points[i], points[i + 1], colors[i]));
          })(i));
        }
        return _results;
      };

      Game.prototype.tick = function(delta) {
        var l, line, p, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
        if (!delta) {
          _ref = this.lines;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            line = _ref[_i];
            line.render(stage);
          }
        }
        delta || (delta = 0);
        this.ball.render(delta);
        _ref1 = this.players;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          p = _ref1[_j];
          Physics.collideBallWithPlayer(this.ball, p);
        }
        Physics.collideBallWithEdges(this.ball);
        _ref2 = this.lines;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          l = _ref2[_k];
          Physics.collideBallWithLine(this.ball, l);
        }
        _ref3 = this.players;
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          p = _ref3[_l];
          p.render(delta);
        }
        this.ball.render();
        return stage.update();
      };

      Game.prototype.start = function() {
        var _this = this;
        this.tick();
        Ticker.setFPS(30);
        Ticker.addListener(this.tick);
        return socket.on('player:new', function(id) {
          console.log('added player ', id);
          return _this.addPlayer(id);
        });
      };

      return Game;

    })();
    start = function() {
      socket.emit('gamespace:register', '');
      return socket.on('gamespace:register:ack', function() {
        var game;
        console.log('Start game');
        game = new Game();
        return game.start();
      });
    };
    return {
      start: start
    };
  });

}).call(this);
